import socket  # ImportÄƒ modulul socket pentru comunicarea prin reÈ›ea
import sys     # ImportÄƒ sys pentru a prelua argumentele din linia de comandÄƒ

def main():
    # VerificÄƒ dacÄƒ utilizatorul a furnizat numÄƒrul de port ca argument
    if len(sys.argv) < 2:
        print('Utilizare: python simple-udp-server.py <PORT>')
        sys.exit(1)  # TerminÄƒ execuÈ›ia programului dacÄƒ nu sunt suficienÈ›i parametri

    # Preia numÄƒrul portului din argumentele liniei de comandÄƒ È™i Ã®l converteÈ™te Ã®n Ã®ntreg
    PORT = int(sys.argv[1])

    # CreeazÄƒ un socket UDP (SOCK_DGRAM) pe IPv4 (AF_INET)
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as server:
        # AsociazÄƒ socket-ul la toate interfeÈ›ele de reÈ›ea È™i la portul specificat
        server.bind(('', PORT))
        print(f"âœ… Serverul UDP ruleazÄƒ pe portul {PORT} È™i aÈ™teaptÄƒ mesaje...")

        while True:
            # AÈ™teaptÄƒ sÄƒ primeascÄƒ un mesaj (maxim 1024 bytes)
            data, address = server.recvfrom(1024)
            message = data.decode().strip()  # DecodificÄƒ È™i eliminÄƒ spaÈ›iile inutile

            # LogheazÄƒ mesajul Ã®n terminal
            print(f"ğŸ“© Primit de la {address}: {message}")

            # SalveazÄƒ mesajul Ã®ntr-un fiÈ™ier de log
            with open("log.txt", "a") as log_file:
                log_file.write(f"{address}: {message}\n")

            # DacÄƒ mesajul este "exit", serverul se Ã®nchide
            if message.lower() == "exit":
                print("ğŸšª Serverul se Ã®nchide...")
                break  # Iese din buclÄƒ È™i terminÄƒ execuÈ›ia

            # ConverteÈ™te mesajul la majuscule
            response = message.upper()

            # Trimite Ã®napoi mesajul transformat
            server.sendto(response.encode(), address)
            print(f"ğŸ“¤ Trimis cÄƒtre {address}: {response}")

    print("ğŸ›‘ Serverul a fost oprit.")

# AsigurÄƒ-te cÄƒ scriptul ruleazÄƒ ca un program principal
if __name__ == '__main__':
    main()
